"use strict";
var core_1 = require("@angular/core");
var dialogs = require("ui/dialogs");
var validator = require('email-validator');
var LoginPage = (function () {
    function LoginPage() {
        this.model = { email: '', password: '', passwordCheck: '' };
        this.isLogin = true;
    }
    LoginPage.prototype.ngAfterViewInit = function () {
        this.setNativeElements();
    };
    LoginPage.prototype.login = function (email, password) {
        var loginSuccess;
        if (validator.validate(email)) {
            //CHECK CREDENTIALS HERE
            dialogs.alert('Email: ' + email + ' Password: ' + password).then(function (result) {
                console.log('Dialog result: ' + result);
            });
            loginSuccess = true;
        }
        else {
            dialogs.alert('Email is not valid').then(function (result) {
                console.log('Dialog result: ' + result);
            });
            loginSuccess = false;
        }
        return loginSuccess;
    };
    LoginPage.prototype.signin = function () {
        if (this.isLogin) {
            this.toggle();
        }
        else {
            this.register(this.model.email, this.model.password, this.model.passwordCheck);
        }
    };
    LoginPage.prototype.toggle = function () {
        var _this = this;
        this.modal.animate({
            opacity: 0,
            duration: 350,
        }).then(function () {
            _this.isLogin = !_this.isLogin;
            _this.modal.animate({
                opacity: 1,
                duration: 350,
            });
        });
    };
    LoginPage.prototype.register = function (email, password, passwordCheck) {
        var _this = this;
        var isEmailValid = validator.validate(email);
        var isPassValid = password.length > 7;
        var isPassDoubleChecked = password === passwordCheck;
        var registerSuccess;
        //CHECK FIELD RULES HERE
        if (isEmailValid && isPassDoubleChecked && isPassValid) {
            dialogs.confirm('Email: ' + email + ' Password: ' + password + ' Password check: ' + passwordCheck).then(function (result) {
                console.log('Dialog result: ' + result);
                if (result) {
                    _this.toggle();
                }
            });
            registerSuccess = true;
        }
        else {
            dialogs.alert(this.alertMessage(isEmailValid, isPassValid, isPassDoubleChecked)).then(function (result) {
                console.log('Dialog result: ' + result);
            });
            registerSuccess = false;
        }
        return registerSuccess;
    };
    LoginPage.prototype.alertMessage = function (isEmailValid, isPassValid, isPassDoubleChecked) {
        var msg = '';
        if (!isEmailValid)
            msg += 'Email is not valid. ';
        if (!isPassValid)
            msg += 'Password is too short. ';
        if (!isPassDoubleChecked)
            msg += 'Passwords don\'t match.';
        return msg;
    };
    LoginPage.prototype.setNativeElements = function () {
        this.modal = this.modalRef.nativeElement;
    };
    return LoginPage;
}());
__decorate([
    core_1.ViewChild('modal'),
    __metadata("design:type", core_1.ElementRef)
], LoginPage.prototype, "modalRef", void 0);
LoginPage = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'sc-login-page',
        templateUrl: 'login.html',
        styleUrls: ['login.css']
    })
], LoginPage);
exports.LoginPage = LoginPage;
//# sourceMappingURL=data:application/json;base64,