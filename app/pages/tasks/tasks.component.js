"use strict";
var core_1 = require("@angular/core");
var content_service_1 = require("../../common/services/content.service");
var platform = require("platform");
var colorModule = require("color");
var TasksPage = (function () {
    function TasksPage(_contentService, _ngZone) {
        this._contentService = _contentService;
        this._ngZone = _ngZone;
        this.isAndroid = platform.isAndroid;
        this.tasks = _contentService.getTasks();
    }
    TasksPage.prototype.ngAfterViewInit = function () {
        this.input = this.inputRef.nativeElement;
    };
    //TOGGLES TASK STATE
    TasksPage.prototype.checkTap = function (task, args) {
        task.isDone = !task.isDone;
        var icon = args.object;
        icon.animate({
            scale: { x: 0, y: 0 },
            duration: 100,
        }).then(function () {
            icon.animate({
                scale: { x: 1, y: 1 },
                duration: 100,
            });
        });
    };
    //ADDS A TASK
    TasksPage.prototype.add = function () {
        if (this.input.text !== '') {
            this.tasks.push({ isDone: false, text: this.input.text });
        }
        this.input.text = '';
    };
    //REMOVES SELECTED TASK
    TasksPage.prototype.removeTap = function (index, args) {
        var _this = this;
        args.object.parent.animate({
            translate: { x: 400, y: 0 },
            duration: 200
        }).then(function () {
            _this.tasks.splice(index, 1);
            args.object.parent.translateX = 0;
        });
    };
    TasksPage.prototype.changeCellBackground = function (args) {
        if (!this.isAndroid) {
            var cell = args.ios; //return UITableViewCell
            cell.backgroundColor = new colorModule.Color('0,0,0,0').ios;
        }
    };
    return TasksPage;
}());
__decorate([
    core_1.ViewChild('input'),
    __metadata("design:type", core_1.ElementRef)
], TasksPage.prototype, "inputRef", void 0);
TasksPage = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'sc-tasks-page',
        templateUrl: 'tasks.html',
    }),
    __metadata("design:paramtypes", [content_service_1.ContentService, core_1.NgZone])
], TasksPage);
exports.TasksPage = TasksPage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFza3MuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGFza3MuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBc0Y7QUFDdEYseUVBQXFFO0FBQ3JFLG1DQUFzQztBQUN0QyxtQ0FBc0M7QUFPdEMsSUFBYSxTQUFTO0lBVWxCLG1CQUFvQixlQUErQixFQUFVLE9BQWU7UUFBeEQsb0JBQWUsR0FBZixlQUFlLENBQWdCO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQVBwRSxjQUFTLEdBQVksUUFBUSxDQUFDLFNBQVMsQ0FBQztRQVE1QyxJQUFJLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRUQsbUNBQWUsR0FBZjtRQUNJLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7SUFDN0MsQ0FBQztJQUVELG9CQUFvQjtJQUNiLDRCQUFRLEdBQWYsVUFBZ0IsSUFBSSxFQUFFLElBQUk7UUFDdEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDM0IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1QsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3JCLFFBQVEsRUFBRSxHQUFHO1NBQ2hCLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDSixJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNULEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDckIsUUFBUSxFQUFFLEdBQUc7YUFDaEIsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsYUFBYTtJQUNOLHVCQUFHLEdBQVY7UUFDSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzlELENBQUM7UUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVELHVCQUF1QjtJQUNoQiw2QkFBUyxHQUFoQixVQUFpQixLQUFLLEVBQUUsSUFBSTtRQUE1QixpQkFRQztRQVBHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUN2QixTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDM0IsUUFBUSxFQUFFLEdBQUc7U0FDaEIsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNKLEtBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLHdDQUFvQixHQUEzQixVQUE0QixJQUFJO1FBQzVCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDbEIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLHdCQUF3QjtZQUM3QyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDaEUsQ0FBQztJQUNMLENBQUM7SUFDTCxnQkFBQztBQUFELENBQUMsQUExREQsSUEwREM7QUFuRHVCO0lBQW5CLGdCQUFTLENBQUMsT0FBTyxDQUFDOzhCQUFtQixpQkFBVTsyQ0FBQztBQVB4QyxTQUFTO0lBTHJCLGdCQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDbkIsUUFBUSxFQUFFLGVBQWU7UUFDekIsV0FBVyxFQUFFLFlBQVk7S0FDNUIsQ0FBQztxQ0FXdUMsZ0NBQWMsRUFBbUIsYUFBTTtHQVZuRSxTQUFTLENBMERyQjtBQTFEWSw4QkFBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIE5nWm9uZSwgQWZ0ZXJWaWV3SW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0NvbnRlbnRTZXJ2aWNlfSBmcm9tICcuLi8uLi9jb21tb24vc2VydmljZXMvY29udGVudC5zZXJ2aWNlJztcbmltcG9ydCBwbGF0Zm9ybSA9IHJlcXVpcmUoJ3BsYXRmb3JtJyk7XG5pbXBvcnQgY29sb3JNb2R1bGUgPSByZXF1aXJlKCdjb2xvcicpO1xuXG5AQ29tcG9uZW50KHtcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxuICAgIHNlbGVjdG9yOiAnc2MtdGFza3MtcGFnZScsXG4gICAgdGVtcGxhdGVVcmw6ICd0YXNrcy5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgVGFza3NQYWdlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgICBwcml2YXRlIHRhc2tzOiBhbnlbXTtcbiAgICBwcml2YXRlIGlzQW5kcm9pZDogYm9vbGVhbiA9IHBsYXRmb3JtLmlzQW5kcm9pZDtcblxuXG5cbiAgICBAVmlld0NoaWxkKCdpbnB1dCcpIHByaXZhdGUgaW5wdXRSZWY6IEVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBpbnB1dDtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NvbnRlbnRTZXJ2aWNlOiBDb250ZW50U2VydmljZSwgcHJpdmF0ZSBfbmdab25lOiBOZ1pvbmUpIHtcbiAgICAgICAgdGhpcy50YXNrcyA9IF9jb250ZW50U2VydmljZS5nZXRUYXNrcygpO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy5pbnB1dCA9IHRoaXMuaW5wdXRSZWYubmF0aXZlRWxlbWVudDtcbiAgICB9XG5cbiAgICAvL1RPR0dMRVMgVEFTSyBTVEFURVxuICAgIHB1YmxpYyBjaGVja1RhcCh0YXNrLCBhcmdzKSB7XG4gICAgICAgIHRhc2suaXNEb25lID0gIXRhc2suaXNEb25lO1xuICAgICAgICBsZXQgaWNvbiA9IGFyZ3Mub2JqZWN0O1xuICAgICAgICBpY29uLmFuaW1hdGUoe1xuICAgICAgICAgICAgc2NhbGU6IHsgeDogMCwgeTogMCB9LFxuICAgICAgICAgICAgZHVyYXRpb246IDEwMCxcbiAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpY29uLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIHNjYWxlOiB7IHg6IDEsIHk6IDEgfSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMTAwLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vQUREUyBBIFRBU0tcbiAgICBwdWJsaWMgYWRkKCkge1xuICAgICAgICBpZiAodGhpcy5pbnB1dC50ZXh0ICE9PSAnJykge1xuICAgICAgICAgICAgdGhpcy50YXNrcy5wdXNoKHsgaXNEb25lOiBmYWxzZSwgdGV4dDogdGhpcy5pbnB1dC50ZXh0IH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5wdXQudGV4dCA9ICcnO1xuICAgIH1cblxuICAgIC8vUkVNT1ZFUyBTRUxFQ1RFRCBUQVNLXG4gICAgcHVibGljIHJlbW92ZVRhcChpbmRleCwgYXJncykge1xuICAgICAgICBhcmdzLm9iamVjdC5wYXJlbnQuYW5pbWF0ZSh7XG4gICAgICAgICAgICB0cmFuc2xhdGU6IHsgeDogNDAwLCB5OiAwIH0sXG4gICAgICAgICAgICBkdXJhdGlvbjogMjAwXG4gICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50YXNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgYXJncy5vYmplY3QucGFyZW50LnRyYW5zbGF0ZVggPSAwO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2hhbmdlQ2VsbEJhY2tncm91bmQoYXJncykge1xuICAgICAgICBpZiAoIXRoaXMuaXNBbmRyb2lkKSB7XG4gICAgICAgICAgICB2YXIgY2VsbCA9IGFyZ3MuaW9zOyAvL3JldHVybiBVSVRhYmxlVmlld0NlbGxcbiAgICAgICAgICAgIGNlbGwuYmFja2dyb3VuZENvbG9yID0gbmV3IGNvbG9yTW9kdWxlLkNvbG9yKCcwLDAsMCwwJykuaW9zO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19