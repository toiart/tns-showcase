"use strict";
var core_1 = require("@angular/core");
var colorModule = require("color");
var platform = require("platform");
//USING PLUGIN: NATIVESCRIPT-SQLITE
var Sqlite = require('nativescript-sqlite');
var DatabasePage = (function () {
    function DatabasePage() {
        this.info = '';
        this.model = { name: '', age: '' };
        this.isAndroid = platform.isAndroid;
        var instance = this;
        //Create the database (DB)
        console.log('creating database...');
        var db_promise = new Sqlite('MyDB', function (err, db) {
            if (err) {
                console.error('We failed to create and open database', err);
                instance.info = 'We failed to create and open database: ' + err;
            }
            else {
                instance.db = db;
                console.log('Database opened and created');
            }
        });
        this.setupDB();
    }
    // Inserts a new row executing SQL
    DatabasePage.prototype.insert = function () {
        var instance = this;
        //CHECK IF ITS OPEN
        if (this.db.isOpen()) {
            /* To execute non-SELECT SQL statements  */
            this.db.execSQL('INSERT INTO tests (name, age) VALUES (?,?)', [this.model.name, this.model.age], function (err, id) {
                console.log('The new record id is:', id);
                instance.info = 'Row added: ' + id;
            });
        }
        else {
            console.log('DB is closed!');
            instance.info = 'DB is closed!';
        }
    };
    //Gets all the rows
    DatabasePage.prototype.getAll = function () {
        var _this = this;
        var instance = this;
        //CHECK IF ITS OPEN
        if (this.db.isOpen()) {
            /* To execute SELECT SQL statements:
                    .get returns the first row as result in the callback
                    .all returns all the rows as result in the callback
                    .each returns each row as result in the callback (which is called as many times as the number of rows) */
            this.db.all('SELECT * FROM tests', function (err, r) {
                console.log('Row of data was: ', JSON.stringify(r));
                instance.info = 'Data received';
                _this.results = r;
            });
        }
        else {
            console.log('DB is closed!');
            instance.info = 'DB is closed!';
        }
    };
    //Deletes tests rows
    DatabasePage.prototype.deleteAll = function () {
        var instance = this;
        //CHECK IF ITS OPEN
        if (this.db.isOpen()) {
            this.db.execSQL('DELETE FROM tests', function (err) {
                if (err) {
                    console.log('There was an error:', err);
                    instance.info = 'There was an error: ' + err;
                }
                else {
                    console.log('Data has been deleted');
                    instance.info = 'Data has been deleted';
                }
            });
        }
        else {
            console.log('DB is closed!');
            instance.info = 'DB is closed!';
        }
    };
    //To close DB
    DatabasePage.prototype.closeDB = function () {
        var instance = this;
        //CHECK IF IT EXISTS AND IF ITS OPEN
        if (this.isAndroid) {
            if (Sqlite.exists('MyDB')) {
                if (this.db.isOpen()) {
                    this.db.close(function (err) {
                        if (err) {
                            console.log('We failed to close database');
                        }
                        else {
                            console.log('DB closed');
                            instance.info = 'DB closed';
                        }
                    });
                }
                else {
                    console.log('DB is already closed!');
                    instance.info = 'DB is already closed!';
                }
            }
            else {
                console.log('DB doesn\'t exist');
                instance.info = 'DB doesn\'t exist';
            }
        }
        else {
            if (this.db.isOpen()) {
                this.db.close(function (err) {
                    if (err) {
                        console.log('We failed to close database');
                    }
                    else {
                        console.log('DB closed');
                        instance.info = 'DB closed';
                    }
                });
            }
            else {
                console.log('DB is already closed!');
                instance.info = 'DB is already closed!';
            }
        }
    };
    //To open DB
    DatabasePage.prototype.openDB = function () {
        var instance = this;
        //CHECK IF IT EXISTS AND IF ITS OPEN
        if (this.isAndroid) {
            if (Sqlite.exists('MyDB')) {
                if (instance.db.isOpen()) {
                    console.log('DB is already open!');
                    instance.info = 'DB is already open!';
                }
                else {
                    var db_promise = new Sqlite('MyDB', false, function (err, db) {
                        if (err) {
                            console.error('We failed to open database', err);
                            instance.info = 'We failed to open database ' + err;
                        }
                        else {
                            console.log('Are we open yet (Inside Callback)? ', db.isOpen() ? 'Yes' : 'No'); // Yes
                            instance.info = 'DB opened';
                            instance.db = db;
                        }
                    });
                }
            }
            else {
                console.log('DB doesn\'t exist');
                instance.info = 'DB doesn\'t exist!';
            }
        }
        else {
            if (instance.db.isOpen()) {
                console.log('DB is already open!');
                instance.info = 'DB is already open!';
            }
            else {
                var db_promise = new Sqlite('MyDB', false, function (err, db) {
                    if (err) {
                        console.error('We failed to open database', err);
                        instance.info = 'We failed to open database ' + err;
                    }
                    else {
                        console.log('Are we open yet (Inside Callback)? ', db.isOpen() ? 'Yes' : 'No'); // Yes
                        instance.info = 'DB opened';
                        instance.db = db;
                    }
                });
            }
        }
    };
    //Initial DB set up
    DatabasePage.prototype.setupDB = function () {
        var _this = this;
        this.db.resultType(Sqlite.RESULTSASOBJECT);
        this.db.execSQL('DROP TABLE IF EXISTS tests;', function (err) {
            if (err) {
                console.log('!---- Drop Err', err);
            }
            _this.db.execSQL('CREATE TABLE tests (`name` TEXT, `age` NUMERIC)', function (err) {
                if (err) {
                    console.log('!---- Create Table err', err);
                    return;
                }
                console.log('TABLE CREATED');
                _this.db.execSQL('INSERT INTO tests (name, age) VALUES ("Nathan Drake",32)', function (err, id) {
                    if (err) {
                        console.log('!---- Insert err', err);
                        return;
                    }
                    console.log('ROW ADDED', id);
                    _this.db.execSQL('INSERT INTO tests (name, age) VALUES ("Elena Fisher",30)', function (err, id) {
                        if (err) {
                            console.log('!---- Insert err', err);
                            return;
                        }
                        console.log('ROW ADDED', id);
                    });
                });
            });
        });
        this.closeDB();
    };
    DatabasePage.prototype.changeCellBackground = function (args) {
        if (!this.isAndroid) {
            var cell = args.ios; //return UITableViewCell
            cell.backgroundColor = new colorModule.Color('0,0,0,0').ios;
        }
    };
    return DatabasePage;
}());
DatabasePage = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'sc-database-page',
        templateUrl: 'database.html',
        styleUrls: ['database.css']
    }),
    __metadata("design:paramtypes", [])
], DatabasePage);
exports.DatabasePage = DatabasePage;
//# sourceMappingURL=data:application/json;base64,